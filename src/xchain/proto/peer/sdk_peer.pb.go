// Code generated by protoc-gen-go. DO NOT EDIT.
// source: peer/sdk_peer.proto

package peer

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SdkPeerReply struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Payload              string   `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	TransactionHash      string   `protobuf:"bytes,4,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	File                 []byte   `protobuf:"bytes,5,opt,name=file,proto3" json:"file,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SdkPeerReply) Reset()         { *m = SdkPeerReply{} }
func (m *SdkPeerReply) String() string { return proto.CompactTextString(m) }
func (*SdkPeerReply) ProtoMessage()    {}
func (*SdkPeerReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_1130fca16f2b943c, []int{0}
}

func (m *SdkPeerReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SdkPeerReply.Unmarshal(m, b)
}
func (m *SdkPeerReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SdkPeerReply.Marshal(b, m, deterministic)
}
func (m *SdkPeerReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SdkPeerReply.Merge(m, src)
}
func (m *SdkPeerReply) XXX_Size() int {
	return xxx_messageInfo_SdkPeerReply.Size(m)
}
func (m *SdkPeerReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SdkPeerReply.DiscardUnknown(m)
}

var xxx_messageInfo_SdkPeerReply proto.InternalMessageInfo

func (m *SdkPeerReply) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SdkPeerReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SdkPeerReply) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *SdkPeerReply) GetTransactionHash() string {
	if m != nil {
		return m.TransactionHash
	}
	return ""
}

func (m *SdkPeerReply) GetFile() []byte {
	if m != nil {
		return m.File
	}
	return nil
}

type SdkPeerRequest struct {
	ContractId           *ContractID `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	Method               string      `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	Payload              string      `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	ChannelName          string      `protobuf:"bytes,4,opt,name=channel_name,json=channelName,proto3" json:"channel_name,omitempty"`
	UserName             string      `protobuf:"bytes,5,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Sign                 string      `protobuf:"bytes,6,opt,name=sign,proto3" json:"sign,omitempty"`
	NodeId               string      `protobuf:"bytes,7,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	File                 []byte      `protobuf:"bytes,8,opt,name=file,proto3" json:"file,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SdkPeerRequest) Reset()         { *m = SdkPeerRequest{} }
func (m *SdkPeerRequest) String() string { return proto.CompactTextString(m) }
func (*SdkPeerRequest) ProtoMessage()    {}
func (*SdkPeerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1130fca16f2b943c, []int{1}
}

func (m *SdkPeerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SdkPeerRequest.Unmarshal(m, b)
}
func (m *SdkPeerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SdkPeerRequest.Marshal(b, m, deterministic)
}
func (m *SdkPeerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SdkPeerRequest.Merge(m, src)
}
func (m *SdkPeerRequest) XXX_Size() int {
	return xxx_messageInfo_SdkPeerRequest.Size(m)
}
func (m *SdkPeerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SdkPeerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SdkPeerRequest proto.InternalMessageInfo

func (m *SdkPeerRequest) GetContractId() *ContractID {
	if m != nil {
		return m.ContractId
	}
	return nil
}

func (m *SdkPeerRequest) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *SdkPeerRequest) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *SdkPeerRequest) GetChannelName() string {
	if m != nil {
		return m.ChannelName
	}
	return ""
}

func (m *SdkPeerRequest) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *SdkPeerRequest) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func (m *SdkPeerRequest) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *SdkPeerRequest) GetFile() []byte {
	if m != nil {
		return m.File
	}
	return nil
}

type ContractSpec struct {
	ContractId           *ContractID `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	ContractInput        string      `protobuf:"bytes,2,opt,name=contract_input,json=contractInput,proto3" json:"contract_input,omitempty"`
	FileName             string      `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	UserName             string      `protobuf:"bytes,4,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Sign                 string      `protobuf:"bytes,5,opt,name=sign,proto3" json:"sign,omitempty"`
	NodeId               string      `protobuf:"bytes,6,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ContractSpec) Reset()         { *m = ContractSpec{} }
func (m *ContractSpec) String() string { return proto.CompactTextString(m) }
func (*ContractSpec) ProtoMessage()    {}
func (*ContractSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_1130fca16f2b943c, []int{2}
}

func (m *ContractSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContractSpec.Unmarshal(m, b)
}
func (m *ContractSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContractSpec.Marshal(b, m, deterministic)
}
func (m *ContractSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractSpec.Merge(m, src)
}
func (m *ContractSpec) XXX_Size() int {
	return xxx_messageInfo_ContractSpec.Size(m)
}
func (m *ContractSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ContractSpec proto.InternalMessageInfo

func (m *ContractSpec) GetContractId() *ContractID {
	if m != nil {
		return m.ContractId
	}
	return nil
}

func (m *ContractSpec) GetContractInput() string {
	if m != nil {
		return m.ContractInput
	}
	return ""
}

func (m *ContractSpec) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *ContractSpec) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *ContractSpec) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func (m *ContractSpec) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func init() {
	proto.RegisterType((*SdkPeerReply)(nil), "peer.SdkPeerReply")
	proto.RegisterType((*SdkPeerRequest)(nil), "peer.SdkPeerRequest")
	proto.RegisterType((*ContractSpec)(nil), "peer.ContractSpec")
}

func init() { proto.RegisterFile("peer/sdk_peer.proto", fileDescriptor_1130fca16f2b943c) }

var fileDescriptor_1130fca16f2b943c = []byte{
	// 515 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xcb, 0x6e, 0x13, 0x3f,
	0x14, 0xc6, 0xff, 0xf3, 0x67, 0x72, 0xe9, 0xc9, 0x10, 0x2a, 0x73, 0xe9, 0x28, 0x6c, 0x42, 0x24,
	0xa4, 0x20, 0xa1, 0x20, 0x5a, 0x84, 0xa2, 0x8a, 0x55, 0xcb, 0xad, 0x1b, 0x14, 0x25, 0xec, 0x23,
	0x77, 0x7c, 0x9a, 0x58, 0x99, 0xb1, 0x5d, 0xdb, 0x13, 0x94, 0x07, 0xe1, 0xb9, 0x78, 0x03, 0x1e,
	0x83, 0x35, 0xb2, 0x67, 0x32, 0x0d, 0x97, 0x22, 0x4d, 0x76, 0xc7, 0xe7, 0x3b, 0x5f, 0xfc, 0xfd,
	0x32, 0x47, 0x86, 0xfb, 0x0a, 0x51, 0xbf, 0x30, 0x6c, 0x35, 0x77, 0xc5, 0x48, 0x69, 0x69, 0x25,
	0x09, 0x5d, 0xdd, 0x7b, 0xe8, 0xa5, 0x44, 0x0a, 0xab, 0x69, 0x62, 0x2f, 0xde, 0x16, 0xe2, 0xe0,
	0x6b, 0x00, 0xd1, 0x8c, 0xad, 0x26, 0x88, 0x7a, 0x8a, 0x2a, 0xdd, 0x10, 0x02, 0x61, 0x22, 0x19,
	0xc6, 0x41, 0x3f, 0x18, 0x36, 0xa6, 0xbe, 0x26, 0x31, 0xb4, 0x32, 0x34, 0x86, 0x2e, 0x30, 0xfe,
	0xbf, 0x1f, 0x0c, 0x0f, 0xa6, 0xdb, 0xa3, 0x53, 0x14, 0xdd, 0xa4, 0x92, 0xb2, 0xf8, 0x4e, 0xa1,
	0x94, 0x47, 0xf2, 0x0c, 0x0e, 0xad, 0xa6, 0xc2, 0xd0, 0xc4, 0x72, 0x29, 0xe6, 0x4b, 0x6a, 0x96,
	0x71, 0xe8, 0x47, 0xee, 0xed, 0xf4, 0x3f, 0x52, 0xb3, 0x74, 0x57, 0x5e, 0xf1, 0x14, 0xe3, 0x46,
	0x3f, 0x18, 0x46, 0x53, 0x5f, 0x0f, 0x7e, 0x04, 0xd0, 0xad, 0x72, 0x5d, 0xe7, 0x68, 0x2c, 0x79,
	0x09, 0x9d, 0x6d, 0xfc, 0x39, 0x67, 0x3e, 0x60, 0xe7, 0xf8, 0x70, 0xe4, 0x49, 0xcf, 0x2b, 0xae,
	0x29, 0x54, 0x8c, 0x8c, 0x3c, 0x82, 0x66, 0x86, 0x76, 0x29, 0x59, 0x99, 0xbb, 0x3c, 0xfd, 0x23,
	0xf6, 0x13, 0x88, 0x92, 0x25, 0x15, 0x02, 0xd3, 0xb9, 0xa0, 0x19, 0x96, 0x91, 0x3b, 0x65, 0xef,
	0x13, 0xcd, 0x90, 0x3c, 0x86, 0x83, 0xdc, 0xa0, 0x2e, 0xf4, 0x86, 0xd7, 0xdb, 0xae, 0xe1, 0x45,
	0x02, 0xa1, 0xe1, 0x0b, 0x11, 0x37, 0x7d, 0xdf, 0xd7, 0xe4, 0x08, 0x5a, 0x42, 0x32, 0x74, 0xa1,
	0x5b, 0x45, 0x0c, 0x77, 0xbc, 0x60, 0x15, 0x78, 0x7b, 0x07, 0xfc, 0x5b, 0x00, 0xd1, 0x96, 0x66,
	0xa6, 0x30, 0xd9, 0x07, 0xfb, 0x29, 0x74, 0x6f, 0x2c, 0x42, 0xe5, 0xb6, 0xc4, 0xbf, 0x5b, 0xcd,
	0xb8, 0xa6, 0x03, 0x71, 0x57, 0x16, 0x20, 0xc5, 0xff, 0xd0, 0x76, 0x8d, 0x3f, 0x29, 0xc3, 0x5b,
	0x28, 0x1b, 0x7f, 0xa7, 0x6c, 0xee, 0x52, 0x1e, 0x7f, 0x0f, 0xab, 0x4f, 0x39, 0x43, 0xbd, 0xe6,
	0x09, 0x92, 0x31, 0x44, 0x5c, 0x70, 0xbb, 0x8d, 0x4f, 0xc8, 0xaf, 0x38, 0x8e, 0xbb, 0x57, 0xf6,
	0x76, 0x97, 0x73, 0xf0, 0x1f, 0x39, 0x85, 0xc8, 0x58, 0xa9, 0x2a, 0xe7, 0x83, 0xdf, 0xa6, 0xfc,
	0xaa, 0xdc, 0xe2, 0x7d, 0x03, 0x5d, 0x8d, 0x99, 0x5c, 0xe3, 0x5e, 0xee, 0x57, 0xd0, 0xe4, 0x62,
	0x2d, 0x57, 0x58, 0xcb, 0xf5, 0x0e, 0x8e, 0xd6, 0xa8, 0xf9, 0x15, 0x4f, 0xa8, 0xdb, 0xf7, 0xcf,
	0x37, 0xab, 0x5f, 0xeb, 0x67, 0x4e, 0xa0, 0x71, 0x9d, 0xa3, 0xde, 0xd4, 0x32, 0x8d, 0x01, 0x72,
	0xe5, 0xb6, 0xfa, 0x3d, 0x4f, 0xeb, 0xa5, 0x3e, 0x85, 0x88, 0xc9, 0x2f, 0x62, 0x2f, 0xef, 0x18,
	0x20, 0xe5, 0xc6, 0x7e, 0xd0, 0x32, 0x57, 0xa6, 0x96, 0xf3, 0x35, 0xb4, 0x17, 0x68, 0xcf, 0x51,
	0xdb, 0x5a, 0xbe, 0xb3, 0xe7, 0xd0, 0x4b, 0xc4, 0x28, 0xd3, 0x9a, 0x6e, 0x46, 0x9a, 0x6e, 0x2e,
	0x29, 0x35, 0xa3, 0x85, 0x56, 0x89, 0x1f, 0x3e, 0xdb, 0x3e, 0x6f, 0x13, 0xf7, 0xde, 0x4d, 0x82,
	0xcb, 0xa6, 0x7f, 0xf8, 0x4e, 0x7e, 0x06, 0x00, 0x00, 0xff, 0xff, 0x16, 0xa2, 0xfb, 0x92, 0x2c,
	0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SdkPeerServiceClient is the client API for SdkPeerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SdkPeerServiceClient interface {
	InitContract(ctx context.Context, in *ContractSpec, opts ...grpc.CallOption) (*SdkPeerReply, error)
	StopContract(ctx context.Context, in *SdkPeerRequest, opts ...grpc.CallOption) (*SdkPeerReply, error)
	RemoveContract(ctx context.Context, in *SdkPeerRequest, opts ...grpc.CallOption) (*SdkPeerReply, error)
	Invoke(ctx context.Context, in *SdkPeerRequest, opts ...grpc.CallOption) (*SdkPeerReply, error)
	VerificationTransaction(ctx context.Context, in *SdkPeerRequest, opts ...grpc.CallOption) (*SdkPeerReply, error)
	Query(ctx context.Context, in *SdkPeerRequest, opts ...grpc.CallOption) (*SdkPeerReply, error)
	UploadFile(ctx context.Context, in *SdkPeerRequest, opts ...grpc.CallOption) (*SdkPeerReply, error)
	DownloadFile(ctx context.Context, in *SdkPeerRequest, opts ...grpc.CallOption) (*SdkPeerReply, error)
	ListGroups(ctx context.Context, in *SdkPeerRequest, opts ...grpc.CallOption) (*SdkPeerReply, error)
	GetCerts(ctx context.Context, in *SdkPeerRequest, opts ...grpc.CallOption) (*SdkPeerReply, error)
}

type sdkPeerServiceClient struct {
	cc *grpc.ClientConn
}

func NewSdkPeerServiceClient(cc *grpc.ClientConn) SdkPeerServiceClient {
	return &sdkPeerServiceClient{cc}
}

func (c *sdkPeerServiceClient) InitContract(ctx context.Context, in *ContractSpec, opts ...grpc.CallOption) (*SdkPeerReply, error) {
	out := new(SdkPeerReply)
	err := c.cc.Invoke(ctx, "/peer.SdkPeerService/initContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdkPeerServiceClient) StopContract(ctx context.Context, in *SdkPeerRequest, opts ...grpc.CallOption) (*SdkPeerReply, error) {
	out := new(SdkPeerReply)
	err := c.cc.Invoke(ctx, "/peer.SdkPeerService/stopContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdkPeerServiceClient) RemoveContract(ctx context.Context, in *SdkPeerRequest, opts ...grpc.CallOption) (*SdkPeerReply, error) {
	out := new(SdkPeerReply)
	err := c.cc.Invoke(ctx, "/peer.SdkPeerService/removeContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdkPeerServiceClient) Invoke(ctx context.Context, in *SdkPeerRequest, opts ...grpc.CallOption) (*SdkPeerReply, error) {
	out := new(SdkPeerReply)
	err := c.cc.Invoke(ctx, "/peer.SdkPeerService/invoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdkPeerServiceClient) VerificationTransaction(ctx context.Context, in *SdkPeerRequest, opts ...grpc.CallOption) (*SdkPeerReply, error) {
	out := new(SdkPeerReply)
	err := c.cc.Invoke(ctx, "/peer.SdkPeerService/verificationTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdkPeerServiceClient) Query(ctx context.Context, in *SdkPeerRequest, opts ...grpc.CallOption) (*SdkPeerReply, error) {
	out := new(SdkPeerReply)
	err := c.cc.Invoke(ctx, "/peer.SdkPeerService/query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdkPeerServiceClient) UploadFile(ctx context.Context, in *SdkPeerRequest, opts ...grpc.CallOption) (*SdkPeerReply, error) {
	out := new(SdkPeerReply)
	err := c.cc.Invoke(ctx, "/peer.SdkPeerService/uploadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdkPeerServiceClient) DownloadFile(ctx context.Context, in *SdkPeerRequest, opts ...grpc.CallOption) (*SdkPeerReply, error) {
	out := new(SdkPeerReply)
	err := c.cc.Invoke(ctx, "/peer.SdkPeerService/downloadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdkPeerServiceClient) ListGroups(ctx context.Context, in *SdkPeerRequest, opts ...grpc.CallOption) (*SdkPeerReply, error) {
	out := new(SdkPeerReply)
	err := c.cc.Invoke(ctx, "/peer.SdkPeerService/listGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdkPeerServiceClient) GetCerts(ctx context.Context, in *SdkPeerRequest, opts ...grpc.CallOption) (*SdkPeerReply, error) {
	out := new(SdkPeerReply)
	err := c.cc.Invoke(ctx, "/peer.SdkPeerService/getCerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SdkPeerServiceServer is the server API for SdkPeerService service.
type SdkPeerServiceServer interface {
	InitContract(context.Context, *ContractSpec) (*SdkPeerReply, error)
	StopContract(context.Context, *SdkPeerRequest) (*SdkPeerReply, error)
	RemoveContract(context.Context, *SdkPeerRequest) (*SdkPeerReply, error)
	Invoke(context.Context, *SdkPeerRequest) (*SdkPeerReply, error)
	VerificationTransaction(context.Context, *SdkPeerRequest) (*SdkPeerReply, error)
	Query(context.Context, *SdkPeerRequest) (*SdkPeerReply, error)
	UploadFile(context.Context, *SdkPeerRequest) (*SdkPeerReply, error)
	DownloadFile(context.Context, *SdkPeerRequest) (*SdkPeerReply, error)
	ListGroups(context.Context, *SdkPeerRequest) (*SdkPeerReply, error)
	GetCerts(context.Context, *SdkPeerRequest) (*SdkPeerReply, error)
}

// UnimplementedSdkPeerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSdkPeerServiceServer struct {
}

func (*UnimplementedSdkPeerServiceServer) InitContract(ctx context.Context, req *ContractSpec) (*SdkPeerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitContract not implemented")
}
func (*UnimplementedSdkPeerServiceServer) StopContract(ctx context.Context, req *SdkPeerRequest) (*SdkPeerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopContract not implemented")
}
func (*UnimplementedSdkPeerServiceServer) RemoveContract(ctx context.Context, req *SdkPeerRequest) (*SdkPeerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveContract not implemented")
}
func (*UnimplementedSdkPeerServiceServer) Invoke(ctx context.Context, req *SdkPeerRequest) (*SdkPeerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invoke not implemented")
}
func (*UnimplementedSdkPeerServiceServer) VerificationTransaction(ctx context.Context, req *SdkPeerRequest) (*SdkPeerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerificationTransaction not implemented")
}
func (*UnimplementedSdkPeerServiceServer) Query(ctx context.Context, req *SdkPeerRequest) (*SdkPeerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (*UnimplementedSdkPeerServiceServer) UploadFile(ctx context.Context, req *SdkPeerRequest) (*SdkPeerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (*UnimplementedSdkPeerServiceServer) DownloadFile(ctx context.Context, req *SdkPeerRequest) (*SdkPeerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (*UnimplementedSdkPeerServiceServer) ListGroups(ctx context.Context, req *SdkPeerRequest) (*SdkPeerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroups not implemented")
}
func (*UnimplementedSdkPeerServiceServer) GetCerts(ctx context.Context, req *SdkPeerRequest) (*SdkPeerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCerts not implemented")
}

func RegisterSdkPeerServiceServer(s *grpc.Server, srv SdkPeerServiceServer) {
	s.RegisterService(&_SdkPeerService_serviceDesc, srv)
}

func _SdkPeerService_InitContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdkPeerServiceServer).InitContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peer.SdkPeerService/InitContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdkPeerServiceServer).InitContract(ctx, req.(*ContractSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _SdkPeerService_StopContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdkPeerServiceServer).StopContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peer.SdkPeerService/StopContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdkPeerServiceServer).StopContract(ctx, req.(*SdkPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SdkPeerService_RemoveContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdkPeerServiceServer).RemoveContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peer.SdkPeerService/RemoveContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdkPeerServiceServer).RemoveContract(ctx, req.(*SdkPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SdkPeerService_Invoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdkPeerServiceServer).Invoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peer.SdkPeerService/Invoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdkPeerServiceServer).Invoke(ctx, req.(*SdkPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SdkPeerService_VerificationTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdkPeerServiceServer).VerificationTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peer.SdkPeerService/VerificationTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdkPeerServiceServer).VerificationTransaction(ctx, req.(*SdkPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SdkPeerService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdkPeerServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peer.SdkPeerService/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdkPeerServiceServer).Query(ctx, req.(*SdkPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SdkPeerService_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdkPeerServiceServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peer.SdkPeerService/UploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdkPeerServiceServer).UploadFile(ctx, req.(*SdkPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SdkPeerService_DownloadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdkPeerServiceServer).DownloadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peer.SdkPeerService/DownloadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdkPeerServiceServer).DownloadFile(ctx, req.(*SdkPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SdkPeerService_ListGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdkPeerServiceServer).ListGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peer.SdkPeerService/ListGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdkPeerServiceServer).ListGroups(ctx, req.(*SdkPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SdkPeerService_GetCerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdkPeerServiceServer).GetCerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peer.SdkPeerService/GetCerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdkPeerServiceServer).GetCerts(ctx, req.(*SdkPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SdkPeerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "peer.SdkPeerService",
	HandlerType: (*SdkPeerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "initContract",
			Handler:    _SdkPeerService_InitContract_Handler,
		},
		{
			MethodName: "stopContract",
			Handler:    _SdkPeerService_StopContract_Handler,
		},
		{
			MethodName: "removeContract",
			Handler:    _SdkPeerService_RemoveContract_Handler,
		},
		{
			MethodName: "invoke",
			Handler:    _SdkPeerService_Invoke_Handler,
		},
		{
			MethodName: "verificationTransaction",
			Handler:    _SdkPeerService_VerificationTransaction_Handler,
		},
		{
			MethodName: "query",
			Handler:    _SdkPeerService_Query_Handler,
		},
		{
			MethodName: "uploadFile",
			Handler:    _SdkPeerService_UploadFile_Handler,
		},
		{
			MethodName: "downloadFile",
			Handler:    _SdkPeerService_DownloadFile_Handler,
		},
		{
			MethodName: "listGroups",
			Handler:    _SdkPeerService_ListGroups_Handler,
		},
		{
			MethodName: "getCerts",
			Handler:    _SdkPeerService_GetCerts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "peer/sdk_peer.proto",
}
